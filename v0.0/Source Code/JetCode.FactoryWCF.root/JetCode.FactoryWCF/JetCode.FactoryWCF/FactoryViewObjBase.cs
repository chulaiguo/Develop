using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using JetCode.BizSchema;
using JetCode.Factory;

namespace JetCode.FactoryWCF
{
    public class FactoryViewObjBase : FactoryBase
    {
        public FactoryViewObjBase(MappingSchema mappingSchema)
            : base(mappingSchema)
        {
        }

        protected override void WriteUsing(StringWriter writer)
        {
            writer.WriteLine("using System;");
            writer.WriteLine("using System.Text;");
            writer.WriteLine("using System.Reflection;");
            writer.WriteLine("using System.Collections;");
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine("using System.Collections.Specialized;");
            writer.WriteLine("using System.ComponentModel;");

            writer.WriteLine();
        }

        protected override void BeginWrite(StringWriter writer)
        {
            writer.WriteLine("namespace {0}.ViewObj", base.ProjectName);
            writer.WriteLine("{");
        }

        protected override void EndWrite(StringWriter writer)
        {
            writer.WriteLine("}");
        }

        protected override void WriteContent(StringWriter writer)
        {
            this.WriteUtils(writer);
            this.WriteRules(writer);
            this.WriteBusinessBase(writer);
            this.WriteBusinessCollectionBase(writer);
        }

        private void WriteUtils(StringWriter writer)
        {
            writer.WriteLine("\tinternal static class Util");
            writer.WriteLine("\t{");
            writer.WriteLine("\t\tpublic static void GetFieldCollection(Type t, Dictionary<string, FieldInfo> list)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (t != typeof(BusinessBase))");
            writer.WriteLine("\t\t\t\treturn;");
            writer.WriteLine();
            writer.WriteLine("\t\t\tBindingFlags flags = BindingFlags.GetField | BindingFlags.NonPublic | BindingFlags.Instance |");
            writer.WriteLine("\t\t\t\t\t\t\t\t\tBindingFlags.DeclaredOnly;");
            writer.WriteLine("\t\t\tFieldInfo[] fields = t.GetFields(flags);");
            writer.WriteLine("\t\t\tforeach (FieldInfo info in fields)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif (list.ContainsKey(info.Name))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tlist.Add(info.Name, info);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tGetFieldCollection(t.BaseType, list);");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic static void GetPropertyCollection(Type t, Dictionary<string, PropertyInfo> list)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (t == typeof(BusinessBase))");
            writer.WriteLine("\t\t\t\treturn;");
            writer.WriteLine();
            writer.WriteLine("\t\t\tBindingFlags flags = BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance |");
            writer.WriteLine("\t\t\t\t\t\t\t\t\tBindingFlags.DeclaredOnly;");
            writer.WriteLine("\t\t\tPropertyInfo[] properties = t.GetProperties(flags);");
            writer.WriteLine("\t\t\tforeach (PropertyInfo info in properties)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif (list.ContainsKey(info.Name))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tlist.Add(info.Name, info);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tGetPropertyCollection(t.BaseType, list);");
            writer.WriteLine("\t\t}");
            writer.WriteLine("\t}");
            writer.WriteLine();
        }

        private void WriteRules(StringWriter writer)
        {
            writer.WriteLine("\tpublic class Rule");
            writer.WriteLine("\t{");
            writer.WriteLine("\t\tprivate readonly string _name;");
            writer.WriteLine("\t\tprivate readonly string _description;");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic Rule(string name, string description)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._name = name;");
            writer.WriteLine("\t\t\tthis._description = description;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic string Description");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._description; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic string Name");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._name; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine("\t}");
            writer.WriteLine();

            writer.WriteLine("\tpublic class RuleCollection");
            writer.WriteLine("\t{");
            writer.WriteLine("\t\tprivate readonly List<Rule> _list = new List<Rule>();");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic List<Rule> List");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._list; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Add(Rule rule)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.List.Add(rule);");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Add(RuleCollection rules)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tforeach (Rule rule in rules.List)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.Add(rule);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Assert(Rule rule, bool isBroken)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (isBroken)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.Add(rule);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool Contains(Rule rule)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\treturn this.List.Contains(rule);");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Remove(Rule rule)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.List.Remove(rule);");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic int Count");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this.List.Count; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Clear()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.List.Clear();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic override string ToString()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tStringBuilder builder = new StringBuilder();");
            writer.WriteLine("\t\t\tforeach (Rule rule in this.List)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tbuilder.AppendLine(rule.Description);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t\treturn builder.ToString();");
            writer.WriteLine("\t\t}");
            writer.WriteLine("\t}");
            writer.WriteLine();
        }

        private void WriteBusinessBase(StringWriter writer)
        {
            writer.WriteLine("\tpublic abstract class BusinessBase : INotifyPropertyChanged");
            writer.WriteLine("\t{");
            writer.WriteLine("\t\tprivate bool _isDeleted = false;");
            writer.WriteLine("\t\tprivate bool _isDirty = true;");
            writer.WriteLine("\t\tprivate bool _isNew = true;");
            writer.WriteLine("\t\tprivate bool _isAbandoned = false;");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected Guid _objectID = new Guid();");
            writer.WriteLine();
            writer.WriteLine("\t\tprivate readonly RuleCollection _brokenRules = new RuleCollection();");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected BusinessBase()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.MarkNew();");
            writer.WriteLine("\t\t\tthis._objectID = Guid.NewGuid();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic object Clone()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tBusinessBase entity = this.MemberwiseClone() as BusinessBase;");
            writer.WriteLine("\t\t\tif(entity == null)");
            writer.WriteLine("\t\t\t\treturn null;");
            writer.WriteLine();
            writer.WriteLine("\t\t\tentity.CloneChildren(this);");
            writer.WriteLine("\t\t\treturn entity;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected virtual void CloneChildren(BusinessBase entity)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic virtual void CopyFrom(BusinessBase entity, bool all)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void CopyFrom(BusinessBase srcEntity)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tDictionary<string, FieldInfo> dstFieldList = new Dictionary<string, FieldInfo>();");
            writer.WriteLine("\t\t\tUtil.GetFieldCollection(this.GetType(), dstFieldList);");
            writer.WriteLine();
            writer.WriteLine("\t\t\tDictionary<string, FieldInfo> srcFieldList = new Dictionary<string, FieldInfo>();");
            writer.WriteLine("\t\t\tUtil.GetFieldCollection(srcEntity.GetType(), srcFieldList);");
            writer.WriteLine("\t\t\tforeach (KeyValuePair<string, FieldInfo> pair in srcFieldList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif(!dstFieldList.ContainsKey(pair.Key))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tFieldInfo srcField = srcFieldList[pair.Key];");
            writer.WriteLine("\t\t\t\tFieldInfo dstField = dstFieldList[pair.Key];");
            writer.WriteLine("\t\t\t\tif(dstField.FieldType != srcField.FieldType)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif(!srcField.FieldType.IsValueType && srcField.FieldType != typeof (string))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tobject srcValue = srcField.GetValue(srcEntity);");
            writer.WriteLine("\t\t\t\tif(srcValue == null)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tdstField.SetValue(this, srcValue);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void CopyParent(BusinessBase srcEntity)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tDictionary<string, PropertyInfo> dstPropertyList = new Dictionary<string, PropertyInfo>();");
            writer.WriteLine("\t\t\tUtil.GetPropertyCollection(this.GetType(), dstPropertyList);");
            writer.WriteLine();
            writer.WriteLine("\t\t\tDictionary<string, PropertyInfo> srcPropertyList = new Dictionary<string, PropertyInfo>();");
            writer.WriteLine("\t\t\tUtil.GetPropertyCollection(srcEntity.GetType(), srcPropertyList);");
            writer.WriteLine("\t\t\tforeach (KeyValuePair<string, PropertyInfo> pair in srcPropertyList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif (!dstPropertyList.ContainsKey(pair.Key))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tPropertyInfo srcProperty = srcPropertyList[pair.Key];");
            writer.WriteLine("\t\t\t\tPropertyInfo dstProperty = dstPropertyList[pair.Key];");
            writer.WriteLine("\t\t\t\tif (dstProperty.PropertyType != srcProperty.PropertyType)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (!dstProperty.CanWrite || !srcProperty.CanRead)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (!srcProperty.PropertyType.IsSubclassOf(typeof(BusinessBase)))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tobject srcValue = srcProperty.GetValue(srcEntity, null);");
            writer.WriteLine("\t\t\t\tif (srcValue == null)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tdstProperty.SetValue(this, srcValue, null);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("\t\tprotected virtual void CheckDBRules()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected virtual void CheckRules()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic RuleCollection BrokenRules");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._brokenRules; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("\t\tpublic Guid ObjectID");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._objectID; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void MarkClean()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._isDirty = false;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void MarkDeleted()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._isDeleted = true;");
            writer.WriteLine("\t\t\tthis.MarkDirty();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void MarkDirty()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._isDirty = true;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void MarkNew()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._isNew = true;");
            writer.WriteLine("\t\t\tthis._isDeleted = false;");
            writer.WriteLine("\t\t\tthis.MarkDirty();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Delete()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.MarkDeleted();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void MarkOld()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._isNew = false;");
            writer.WriteLine("\t\t\tthis._isDeleted = false;");
            writer.WriteLine("\t\t\tthis.MarkClean();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void MarkAbandoned()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis._isAbandoned = true;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool IsDeleted");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._isDeleted; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool IsNew");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._isNew; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool IsSelfDirty");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._isDirty; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool IsAbandoned");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._isAbandoned; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic virtual void AcceptChanges()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (this.IsDirty)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.MarkOld();");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic virtual void AcceptRowVersion(Dictionary<Guid, byte[]> rowVersionList, List<BusinessBase> changedList)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif(rowVersionList.ContainsKey(this.ObjectID))");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.RowVersion = rowVersionList[this.ObjectID];");
            writer.WriteLine("\t\t\t\tthis.MarkOld();");
            writer.WriteLine("\t\t\t\tchangedList.Add(this);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Replace(List<BusinessBase> changedList)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tforeach (BusinessBase item in changedList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.ReplaceItem(item);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic virtual bool ReplaceItem(BusinessBase item)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (this.Equals(item))");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif (item.IsDeleted)");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tthis.MarkAbandoned();");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine("\t\t\t\telse");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tthis.CopyFrom(item, false);");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\treturn false;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic virtual bool IsDirty");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._isDirty; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic virtual bool IsValid");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis._brokenRules.Clear();");
            writer.WriteLine("\t\t\t\tif (!this.IsSelfDirty)");
            writer.WriteLine("\t\t\t\t\treturn true;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tthis.CheckDBRules();");
            writer.WriteLine("\t\t\t\tthis.CheckRules();");
            writer.WriteLine("\t\t\t\treturn this._brokenRules.Count == 0;");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic abstract string CreatedBy { get; set; }");
            writer.WriteLine("\t\tpublic abstract DateTime CreatedOn { get; set; }");
            writer.WriteLine("\t\tpublic abstract string ModifiedBy { get; set; }");
            writer.WriteLine("\t\tpublic abstract DateTime ModifiedOn { get; set; }");
            writer.WriteLine("\t\tpublic abstract byte[] RowVersion { get; set; }");
            writer.WriteLine();
            writer.WriteLine("\t\t#region INotifyPropertyChanged Members");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic event PropertyChangedEventHandler PropertyChanged;");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void OnPropertyChanged(string property)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (this.PropertyChanged != null)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.PropertyChanged(this, new PropertyChangedEventArgs(property));");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine("\t\t#endregion");
            writer.WriteLine("\t}");
            writer.WriteLine();
        }

        private void WriteBusinessCollectionBase(StringWriter writer)
        {
            writer.WriteLine("\tpublic abstract class BusinessCollectionBase : INotifyCollectionChanged");
            writer.WriteLine("\t{");
            writer.WriteLine("\t\tprivate int _blockCount = -1;");
            writer.WriteLine("\t\tprivate int _blockIndex = -1;");
            writer.WriteLine("\t\tprivate int _blockSize = -1;");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic abstract Type ItemType { get; }");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic int BlockCount");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._blockCount; }");
            writer.WriteLine("\t\t\tset { this._blockCount = value; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic int BlockIndex");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._blockIndex; }");
            writer.WriteLine("\t\t\tset { this._blockIndex = value; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic int BlockSize");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget { return this._blockSize; }");
            writer.WriteLine("\t\t\tset { this._blockSize = value; }");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected abstract IList InnerList { get;}");
            writer.WriteLine("\t\tprotected abstract IList InnerDeletedList { get; }");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic object Clone()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tBusinessCollectionBase list = (BusinessCollectionBase)Activator.CreateInstance(this.GetType());");
            writer.WriteLine("\t\t\tlist.BlockSize = this.BlockSize;");
            writer.WriteLine("\t\t\tlist.BlockIndex = this.BlockIndex;");
            writer.WriteLine("\t\t\tlist.BlockCount = this.BlockCount;");
            writer.WriteLine();
            writer.WriteLine("\t\t\tforeach (BusinessBase item in this.InnerDeletedList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tlist.InnerDeletedList.Add(item.Clone());");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tforeach (BusinessBase item in this.InnerList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tlist.InnerList.Add(item.Clone());");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\treturn list;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void AcceptChanges()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tforeach (BusinessBase item in this.InnerList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\titem.AcceptChanges();");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tthis.InnerDeletedList.Clear();");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void AcceptChanges(Guid objId)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tfor (int i = this.InnerDeletedList.Count - 1; i >= 0; i--)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tBusinessBase entity = this.InnerDeletedList[i] as BusinessBase;");
            writer.WriteLine("\t\t\t\tif(entity == null)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (entity.ObjectID == objId)");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tthis.InnerDeletedList.RemoveAt(i);");
            writer.WriteLine("\t\t\t\t\treturn;");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tforeach (BusinessBase item in this.InnerList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif (item.ObjectID == objId)");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\titem.AcceptChanges();");
            writer.WriteLine("\t\t\t\t\tbreak;");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void AcceptRowVersion(Dictionary<Guid, byte[]> rowVersionList, List<BusinessBase> changedList)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tfor (int i = this.InnerDeletedList.Count - 1; i >= 0; i--)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tBusinessBase entity = this.InnerDeletedList[i] as BusinessBase;");
            writer.WriteLine("\t\t\t\tif (entity == null)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (!rowVersionList.ContainsKey(entity.ObjectID))");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tthis.InnerDeletedList.RemoveAt(i);");
            writer.WriteLine("\t\t\t\tentity.Delete();");
            writer.WriteLine("\t\t\t\tchangedList.Add(entity);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tfor (int i = this.InnerList.Count - 1; i >= 0; i--)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tBusinessBase entity = this.InnerList[i] as BusinessBase;");
            writer.WriteLine("\t\t\t\tif (entity == null)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (rowVersionList.ContainsKey(entity.ObjectID))");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tbyte[] rowVersion = rowVersionList[entity.ObjectID];");
            writer.WriteLine("\t\t\t\t\tif (rowVersion == null || rowVersion.Length == 0)");
            writer.WriteLine("\t\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\t\tthis.InnerList.RemoveAt(i);");
            writer.WriteLine("\t\t\t\t\t\tcontinue;");
            writer.WriteLine("\t\t\t\t\t}");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tentity.AcceptRowVersion(rowVersionList, changedList);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic void Replace(List<BusinessBase> changedList)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tforeach (BusinessBase item in changedList)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.ReplaceItem(item);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool ReplaceItem(BusinessBase item)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (item.IsDeleted)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tfor (int i = this.InnerDeletedList.Count - 1; i >= 0; i--)");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tBusinessBase entity = this.InnerDeletedList[i] as BusinessBase;");
            writer.WriteLine("\t\t\t\t\tif (entity == null)");
            writer.WriteLine("\t\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\t\tif (entity.Equals(item))");
            writer.WriteLine("\t\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\t\tthis.InnerDeletedList.RemoveAt(i);");
            writer.WriteLine("\t\t\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t\t\t}");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tfor (int i = this.InnerList.Count - 1; i >= 0; i--)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tBusinessBase entity = this.InnerList[i] as BusinessBase;");
            writer.WriteLine("\t\t\t\tif (entity == null)");
            writer.WriteLine("\t\t\t\t\tcontinue;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (item.IsDeleted && entity.Equals(item))");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tthis.InnerList.RemoveAt(i);");
            writer.WriteLine("\t\t\t\t\tthis.OnRemoveItem(entity, i);");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tif (entity.ReplaceItem(item))");
            writer.WriteLine("\t\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\tif (this.ItemType == item.GetType())");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tint index = this.InnerList.Count;");
            writer.WriteLine("\t\t\t\tthis.InnerList.Insert(index, item);");
            writer.WriteLine("\t\t\t\tthis.OnInsertItem(index, item);");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\treturn false;");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool IsDirty");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tif (this.InnerDeletedList.Count > 0)");
            writer.WriteLine("\t\t\t\t\treturn true;");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\tforeach (BusinessBase item in this.InnerList)");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tif (item.IsDirty)");
            writer.WriteLine("\t\t\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\treturn false;");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("\t\tpublic bool IsValid");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tget");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tforeach (BusinessBase item in this.InnerList)");
            writer.WriteLine("\t\t\t\t{");
            writer.WriteLine("\t\t\t\t\tif (!item.IsValid)");
            writer.WriteLine("\t\t\t\t\t\treturn false;");
            writer.WriteLine("\t\t\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t\t\treturn true;");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t#region INotifyCollectionChanged Members");
            writer.WriteLine();
            writer.WriteLine("\t\tpublic event NotifyCollectionChangedEventHandler CollectionChanged;");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void OnCollectionChanged(NotifyCollectionChangedEventArgs e)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tif (this.CollectionChanged != null)");
            writer.WriteLine("\t\t\t{");
            writer.WriteLine("\t\t\t\tthis.CollectionChanged(this, e);");
            writer.WriteLine("\t\t\t}");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void OnClearItems()");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void OnInsertItem(int index, object item)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, item, index));");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\tprotected void OnRemoveItem(object changedItem, int index)");
            writer.WriteLine("\t\t{");
            writer.WriteLine("\t\t\tthis.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, changedItem, index));");
            writer.WriteLine("\t\t}");
            writer.WriteLine();
            writer.WriteLine("\t\t#endregion");
            writer.WriteLine("\t}");

        }
    }
}
